classDiagram
    class GameController {
        -IBoard board
        -List~IPlayer~ players
        -int currentPlayerIndex
        +Action~Position,Position~ OnMoveExecuted
        + StartGame()
        + HandleMove(Position, Position)
        + CanMoveTo(Position, IBoard): bool
        + GetPossibleMoves(IBoard): List~Position~
        + EvaluateMove(Position, Position): bool
        + GetCapturedPositions(Position, Position): List~Position~
        + IsCapture(Position, Position): bool
        + MovePiece(IPiece, Position)
        + CapturePiece(Position, Position)
        + HasForcedCaptures(IPlayer): bool      
        + GetCaptureChain(Position, Position): List~Position~
        + PromoteIfNeeded(IPiece)
        + SwitchTurn()
        + GetCurrentPlayer(): IPlayer
        + GetAllValidMoves(IPlayer): List~Position[]~
        + IsGameOver(): bool
        + EndGame()
    }

    class IBoard {
        +InitializeBoard(List~IPlayer~)
        +GetPiece(int, int): IPiece
        +SetPiece(int, int, IPiece)
        <>
    }

    class Board {
        -IPiece[][] grid
        +InitializeBoard(List~IPlayer~)
        +GetPiece(int, int): IPiece
        +SetPiece(int, int, IPiece)
    }

    class IPlayer {
        +GetColor(): PieceColor
        +GetName(): string
        +IsBottom(): bool
        <>
    }

    class Player {
        -string name
        -PieceColor color
        -bool isBottomPlayer
        +GetColor(): PieceColor
        +GetName(): string
        +IsBottom(): bool
    }

    class Position {
        +int X
        +int Y
        << record struct >>
    }

    class PieceType {
        NORMAL
        KING
        << enum >>
    }

    class PieceColor {
        RED
        BLACK
        << enum >>
    }

    class IPiece {
        +GetColor(): PieceColor
        +GetPosition(): Position
        +SetPosition(Position)
        +GetType(): PieceType
        +SetType(PieceType)
        +CanMoveTo(Position, IBoard): bool
        +GetPossibleMoves(IBoard): List~Position~
        <>
    }

    class Piece {
        -PieceColor color
        -Position position
        -PieceType type
        +GetColor(): PieceColor
        +GetPosition(): Position
        +SetPosition(Position)
        +GetType(): PieceType
        +SetType(PieceType)
        +CanMoveTo(Position, IBoard): bool
        +GetPossibleMoves(IBoard): List~Position~
    }

    GameController --> IBoard : Uses
    GameController --> IPlayer : Controls
    GameController --> Position : Processes
    IBoard <|-- Board
    IPlayer <|-- Player
    IPiece <|-- Piece
    IBoard --> IPiece : Manages
    IPiece --> Position : Has
    IPiece --> PieceColor : Has
    IPiece --> PieceType : Has
    Player --> IPiece : Owns