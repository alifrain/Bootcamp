classDiagram
    class GameController {
        -IBoard board
        -IPlayer[] players
        -int currentPlayerIndex
        -Dictionary~IPiece, IPlayer~ players
        +Action~Position,Position~ OnMoveExecuted
        + StartGame()
        + HandleMove(Position, Position)
        + CanMoveTo(Position, IBoard): bool
        + GetPossibleMoves(IBoard): List~Position~
        + EvaluateMove(Position, Position): bool
        + GetCapturedPositions(Position, Position): List~Position~
        + IsCapture(Position, Position): bool
        + MovePiece(IPiece, Position)
        + CapturePiece(Position, Position)
        + HasForcedCaptures(IPlayer): bool      
        + GetCaptureChain(Position, Position): List~Position~
        + PromoteIfNeeded(IPiece)
        + SwitchTurn()
        + GetCurrentPlayer(): IPlayer
        + GetAllValidMoves(IPlayer): List~Position[]~
        + IsGameOver(): bool
        + EndGame()
    }
    
    class IBoard {
        +GetPiece(int, int): IPiece
        +SetPiece(int, int, IPiece)
    }
    
    class Board {
        +IPiece[,] grid
        +GetPiece(int, int): IPiece
        +SetPiece(int, int, IPiece)
    }
    
    class IPlayer {
        +Color: PieceColor
        +Name: string
    }
    
    class Player {
        +string name
        +PieceColor color
    }
    
    class Position {
        +int X
        +int Y
        << record struct >>
    }
    
    class PieceType {
        NORMAL
        KING
        << enum >>
    }
    
    class PieceColor {
        RED
        BLACK
        << enum >>
    }
    
    class IPiece {
        +Color: PieceColor
        +Position: Position
        +Type: PieceType
    }
    
    class Piece {
        +PieceColor color
        +Position position
        +PieceType type
    }
    
    GameController --> IBoard
    GameController --> IPlayer
    GameController --> IPiece
    GameController --> Position

    IBoard <|-- Board
    IPlayer <|-- Player
    IPiece <|-- Piece
    Piece <|-- PieceType
    Piece <|-- PieceColor